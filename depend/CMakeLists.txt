
ADD_CUSTOM_TARGET(depend)

### glm
MESSAGE("Adding dependency: glm")

SET(GLM_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/glm" PARENT_SCOPE)

ADD_CUSTOM_TARGET(glm)
ADD_DEPENDENCIES(depend glm)

### nlohmann_json
MESSAGE("Adding dependency: json")

SET(JSON_INCLUDE_DIRS "${CMAKE_CURRENT_LIST_DIR}/json/src" PARENT_SCOPE)

ADD_CUSTOM_TARGET(json)
ADD_DEPENDENCIES(depend json)

### lua
MESSAGE("Adding dependency: lua")

SET(LUA_OPTIONS
)

SET(LUA_INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/lua/src"
    "${CMAKE_BINARY_DIR}/depend/lua"
    PARENT_SCOPE
)

IF(MSVC)
    SET(LUA_LIBRARIES_DEBUG "${CMAKE_BINARY_DIR}/depend/lua/Debug/lua.lib")
    SET(LUA_LIBRARIES_DEBUG "${LUA_LIBRARIES_DEBUG}" PARENT_SCOPE)
    SET(LUA_LIBRARIES_RELEASE "${CMAKE_BINARY_DIR}/depend/lua/Release/lua.lib")
    SET(LUA_LIBRARIES_RELEASE "${LUA_LIBRARIES_RELEASE}" PARENT_SCOPE)
ELSE()
    SET(LUA_LIBRARIES "${CMAKE_BINARY_DIR}/depend/lua/liblua.so")
    SET(LUA_LIBRARIES "${LUA_LIBRARIES}" PARENT_SCOPE)
ENDIF()

FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua)
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
        ${CMAKE_CURRENT_SOURCE_DIR}/lua ${LUA_OPTIONS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua
)

IF (MSVC)
    ADD_CUSTOM_COMMAND(
        OUTPUT ${LUA_LIBRARIES_DEBUG}
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target liblua
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua
    )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${LUA_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target liblua
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua
    )
    ADD_CUSTOM_TARGET(lua DEPENDS ${LUA_LIBRARIES_DEBUG} ${LUA_LIBRARIES_RELEASE})
ELSE()
    ADD_CUSTOM_COMMAND(
        OUTPUT ${LUA_LIBRARIES}
        COMMAND ${CMAKE_COMMAND} --build . --target liblua
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/lua
    )
    ADD_CUSTOM_TARGET(lua DEPENDS ${LUA_LIBRARIES})
ENDIF()
ADD_DEPENDENCIES(depend lua)

### zlib
MESSAGE("Adding dependency: zlib")

SET(ZLIB_OPTIONS
)

SET(ZLIB_INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/zlib"
    "${CMAKE_BINARY_DIR}/depend/zlib"
    PARENT_SCOPE
)

IF(MSVC)
    SET(ZLIB_LIBRARIES_DEBUG "${CMAKE_BINARY_DIR}/depend/lua/Debug/zlibd.lib")
    SET(ZLIB_LIBRARIES_DEBUG "${ZLIB_LIBRARIES_DEBUG}" PARENT_SCOPE)
    SET(ZLIB_LIBRARIES_RELEASE "${CMAKE_BINARY_DIR}/depend/lua/Release/zlibd.lib")
    SET(ZLIB_LIBRARIES_RELEASE "${ZLIB_LIBRARIES_RELEASE}" PARENT_SCOPE)
ELSE()
    SET(ZLIB_LIBRARIES "${CMAKE_BINARY_DIR}/depend/zlib/libz.so")
    SET(ZLIB_LIBRARIES "${ZLIB_LIBRARIES}" PARENT_SCOPE)
ENDIF()

FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/depend/zlib)
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
        ${CMAKE_CURRENT_SOURCE_DIR}/zlib ${ZLIB_OPTIONS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/zlib
)

IF (MSVC)
    ADD_CUSTOM_COMMAND(
        OUTPUT ${ZLIB_LIBRARIES_DEBUG}
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target zlib
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/zlib
    )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${ZLIB_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target zlib
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/zlib
    )
    ADD_CUSTOM_TARGET(zlib DEPENDS ${ZLIB_LIBRARIES_DEBUG} ${ZLIB_LIBRARIES_RELEASE})
ELSE()
    ADD_CUSTOM_COMMAND(
        OUTPUT ${ZLIB_LIBRARIES}
        COMMAND ${CMAKE_COMMAND} --build . --target zlib
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/zlib
    )
    ADD_CUSTOM_TARGET(zlib DEPENDS ${ZLIB_LIBRARIES})
ENDIF()
ADD_DEPENDENCIES(depend zlib)

### GLFW
MESSAGE("Adding dependency: glfw")

SET(GLFW_OPTIONS
    -DGLFW_BUILD_EXAMPLES=OFF
    -DGLFW_BUILD_TESTS=OFF
    -DGLFW_BUILD_DOCS=OFF
    -DGLFW_INSTALL=OFF
)

SET(GLFW_INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/glfw/include"
    PARENT_SCOPE
)

IF(MSVC)
    SET(GLFW_LIBRARIES_DEBUG "${CMAKE_BINARY_DIR}/depend/glfw/src/Debug/glfw3.lib")
    SET(GLFW_LIBRARIES_DEBUG "${GLFW_LIBRARIES_DEBUG}" PARENT_SCOPE)
    SET(GLFW_LIBRARIES_RELEASE "${CMAKE_BINARY_DIR}/depend/glfw/src/Release/glfw3.lib")
    SET(GLFW_LIBRARIES_RELEASE "${GLFW_LIBRARIES_RELEASE}" PARENT_SCOPE)
ELSE()
    SET(GLFW_OPTIONS ${GLFW_OPTIONS} -DBUILD_SHARED_LIBS=ON)
    SET(GLFW_LIBRARIES "${CMAKE_BINARY_DIR}/depend/glfw/src/libglfw.so")
    SET(GLFW_LIBRARIES "${GLFW_LIBRARIES}" PARENT_SCOPE)
ENDIF()

FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw)
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
        ${CMAKE_CURRENT_SOURCE_DIR}/glfw ${GLFW_OPTIONS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw
)

IF (MSVC)
    ADD_CUSTOM_COMMAND(
        OUTPUT ${GLFW_LIBRARIES_DEBUG}
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target glfw
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw
    )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${GLFW_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target glfw
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw
    )
    ADD_CUSTOM_TARGET(glfw DEPENDS ${GLFW_LIBRARIES_DEBUG} ${GLFW_LIBRARIES_RELEASE})
ELSE()
    ADD_CUSTOM_COMMAND(
        OUTPUT ${GLFW_LIBRARIES}
        COMMAND ${CMAKE_COMMAND} --build . --target glfw
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/glfw
    )
    ADD_CUSTOM_TARGET(glfw DEPENDS ${GLFW_LIBRARIES})
ENDIF()
ADD_DEPENDENCIES(depend glfw)

### FlatBuffers
MESSAGE("Adding dependency: flatbuffers")

SET(FLATBUFFERS_OPTIONS
    -DFLATBUFFERS_BUILD_TESTS=OFF
    -DFLATBUFFERS_BUILD_FLATHASH=OFF
    -DFLATBUFFERS_INSTALL=OFF
)

SET(FLATBUFFERS_INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}/flatbuffers/include"
    PARENT_SCOPE
)

IF(MSVC)
    SET(FLATBUFFERS_LIBRARIES_DEBUG "${CMAKE_BINARY_DIR}/depend/flatbuffers/Debug/flatbuffers.lib")
    SET(FLATBUFFERS_LIBRARIES_DEBUG "${FLATBUFFERS_LIBRARIES_DEBUG}" PARENT_SCOPE)
    SET(FLATBUFFERS_LIBRARIES_RELEASE "${CMAKE_BINARY_DIR}/depend/flatbuffers/Release/flatbuffers.lib")
    SET(FLATBUFFERS_LIBRARIES_RELEASE "${FLATBUFFERS_LIBRARIES_RELEASE}" PARENT_SCOPE)
ELSE()
    SET(FLATBUFFERS_LIBRARIES "${CMAKE_BINARY_DIR}/depend/flatbuffers/libflatbuffers.a")
    SET(FLATBUFFERS_LIBRARIES "${FLATBUFFERS_LIBRARIES}" PARENT_SCOPE)
ENDIF()

FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/depend/flatbuffers)
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
        ${CMAKE_CURRENT_SOURCE_DIR}/flatbuffers ${ZLIB_OPTIONS}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/flatbuffers
)

IF (MSVC)
    ADD_CUSTOM_COMMAND(
        OUTPUT ${FLATBUFFERS_LIBRARIES_DEBUG}
        COMMAND ${CMAKE_COMMAND} --build . --config Debug --target flatbuffers
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/flatbuffers
    )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${FLATBUFFERS_LIBRARIES_RELEASE}
        COMMAND ${CMAKE_COMMAND} --build . --config Release --target flatbuffers
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/flatbuffers
    )
    ADD_CUSTOM_TARGET(flatbuffers
        DEPENDS ${FLATBUFFERS_LIBRARIES_DEBUG} ${FLATBUFFERS_LIBRARIES_RELEASE})
ELSE()
    ADD_CUSTOM_COMMAND(
        OUTPUT ${FLATBUFFERS_LIBRARIES}
        COMMAND ${CMAKE_COMMAND} --build . --target flatbuffers
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/depend/flatbuffers
    )
    ADD_CUSTOM_TARGET(flatbuffers DEPENDS ${FLATBUFFERS_LIBRARIES})
ENDIF()
ADD_DEPENDENCIES(depend flatbuffers)

SET_TARGET_PROPERTIES(
    depend glm json lua zlib glfw flatbuffers
    PROPERTIES FOLDER "depend"
)
